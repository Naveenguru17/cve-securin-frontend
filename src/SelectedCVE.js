import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";

const SelectedCVE = () => {
  const { cve_id } = useParams();
  const [cveDetails, setCveDetails] = useState(null);

  console.log(cveDetails)

  useEffect(() => {
    const fetchCveDetails = async () => {
      try {
        const response = await axios.get(`http://localhost:3001/api/cves/${cve_id}`);
        setCveDetails(response.data);
      } catch (error) {
        console.error('Error fetching CVE details:', error);
      }
    };

    fetchCveDetails();
  }, [cve_id]);

  if (!cveDetails) {
    return <div className="text-red-500">Loading...</div>;
  }

  const { descriptions, metrics, configurations } = cveDetails.data;

  return (
    <div className="text-start mx-10 my-5 p-10">
      <h1 className="text-3xl font-bold">{cve_id}</h1>
      <div className="mt-4">
        <h1 className="text-xl font-semibold">Description:</h1>
        <ul className="list-disc list-inside">
          {descriptions.map((description, index) => (
            <li key={index}>{description.value}</li>
          ))}
        </ul>
      </div>
      <div className="mt-4">
        <h1 className="text-xl font-semibold">CVSS V2 Metrics:</h1>
        <div className="flex flex-wrap mt-2">
          {metrics.cvssMetricV2.map((metric, index) => (
            <div key={index} className="mr-4">
              <div className="flex">
                <h2 className="font-semibold">Severity:</h2>
                <h2 className="ml-2"> {metric.baseSeverity}</h2>
                <h2 className="ml-5 font-semibold">Score:</h2>
                <h2 className="ml-2"> {metric.exploitabilityScore}</h2>
              </div>
              <div className="flex">
                <h2 className="font-semibold">Vector String:</h2>
                <h2 className="ml-2"> {metric.cvssData.vectorString}</h2>
              </div>
            </div>
          ))}
        </div>
      </div>

      <table className="mt-4 w-full table-auto border-collapse border border-gray-400">
        <thead>
          <tr className="bg-gray-200">
            <th className="px-4 py-2 border border-gray-400">Access Vector</th>
            <th className="px-4 py-2 border border-gray-400">
              Access Complexity
            </th>
            <th className="px-4 py-2 border border-gray-400">Authentication</th>
            <th className="px-4 py-2 border border-gray-400">
              Confidentiality Impact
            </th>
            <th className="px-4 py-2 border border-gray-400">
              Integrity Impact
            </th>
            <th className="px-4 py-2 border border-gray-400">
              Availability Impact
            </th>
          </tr>
        </thead>
        <tbody>
          {metrics?.cvssMetricV2?.map((metric, index) => (
            <tr key={index}>
              <td className="px-4 py-2 border border-gray-400 text-center">
                {metric.cvssData.accessVector}
              </td>
              <td className="px-4 py-2 border border-gray-400 text-center">
                {metric.cvssData.accessComplexity}
              </td>
              <td className="px-4 py-2 border border-gray-400 text-center">
                {metric.cvssData.authentication}
              </td>
              <td className="px-4 py-2 border border-gray-400 text-center">
                {metric.cvssData.confidentialityImpact}
              </td>
              <td className="px-4 py-2 border border-gray-400 text-center">
                {metric.cvssData.integrityImpact}
              </td>
              <td className="px-4 py-2 border border-gray-400 text-center">
                {metric.cvssData.availabilityImpact}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="font-semibold text-xl mt-4">Scores:</div>

      <div className="mt-1">
        {metrics.cvssMetricV2.map((metric) => (
          <div key={metric.baseSeverity} className="mb-4">
            <h1 className=" font-semibold">
              Exploitability Score: {metric.exploitabilityScore}
            </h1>
            <h1 className=" font-semibold">
              Impact Score: {metric.impactScore}
            </h1>
          </div>
        ))}
      </div>

      <div className="mt-4">
        <h1 className="text-lg font-semibold">CPE:</h1>
        <table className="w-full mt-2 table-auto border-collapse border border-gray-400">
          <thead>
            <tr className="bg-gray-200">
              <th className="px-4 py-2 border border-gray-400">Criteria</th>
              <th className="px-4 py-2 border border-gray-400">
                Match Criteria ID
              </th>
              <th className="px-4 py-2 border border-gray-400">Vulnerable</th>
            </tr>
          </thead>
          <tbody>
            {configurations.map((config, index) =>
              config.nodes.map((node, nodeIndex) =>
                node.cpeMatch.map((cpe, cpeIndex) => (
                  <tr key={`${index}-${nodeIndex}-${cpeIndex}`}>
                    <td className="px-4 py-2 border border-gray-400">
                      {cpe.criteria}
                    </td>
                    <td className="px-4 py-2 border border-gray-400">
                      {cpe.matchCriteriaId}
                    </td>
                    <td className="px-4 py-2 border border-gray-400 text-center">
                      {cpe.vulnerable ? "Yes" : "No"}
                    </td>
                  </tr>
                ))
              )
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default SelectedCVE;
